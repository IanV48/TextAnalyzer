/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package textanalyzer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Ian
 */
public class Methods {
    //Splits text into a list of each word used. Hyphenated words are counted
    //as one, and all are lower-case
    public ArrayList<String> wordsplit(String s){
        //Initially splits words by spaces and punctuation
        String[] arr = s.split("[.!?;:\'\", \n]",-1);
        //Turns the array into a list (still has a variety of blank entries we
        //need to get rid of
        List<String> templist = Arrays.asList(arr);
        ArrayList<String> l = new ArrayList();
        //If it's not a blank entry, we add the entry into our final list
        for(int i=0; i<templist.size();i++){
            if(!templist.get(i).equals("")){
                l.add(templist.get(i).toLowerCase());
            }
        }
        return l;
    }
    
    //Creates a list of Word objects that tell you what the word is as well as
    //how many times it has been used, based on a string likely generated by
    //wordsplit
    public ArrayList<Word> wordsort(ArrayList<String> l){
        //Start the Word list off
        ArrayList<Word> words = new ArrayList<Word>();
        //For each word in the String list...
        for(int i=0;i<l.size();i++){
            //Let's us know whether we found a match in the upcoming loop
            boolean contains = false;
            //If we have already used the word, we just increment the number of
            //uses for it's entry
            for(int j=0;j<words.size();j++){
                if (words.get(j).equals(l.get(i))){
                    words.get(j).increment();
                    contains = true;
                }
            }
            //Otherwise, we add it to our Word List, and count it as having
            //happened once so far
            if(!contains){
                words.add(new Word(l.get(i)));
            }
        }
        
        //Finally we sort the Word list; with the most commonly used words
        //coming first
        words.sort(new SortByUsage());
        
        return words;
    }
    
    public String lastsentencewithword(String passage, String word){
        //We split the passage into sentences
        String[] arr = passage.split("[.?!]",-1);
        //Working backwards, we check each sentence for whether it contains
        //the top word
        for(int i=arr.length-1;i>=0;i--){
            if(arr[i].contains(word)){
                //Getting rid of potential whitespace for the user, and adding
                //punctuation
                if(arr[i].charAt(0)==' '){
                    return arr[i].substring(1) + ".";
                }
                else{
                    return arr[i] + ".";
                }
            }
        }
        //In the odd case that the top word is not in any sentence
        return "ERROR: Top Word not found";
    }
    
}
